// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Organetto.Infrastructure.Data.Shared;

#nullable disable

namespace Organetto.Infrastructure.Data.Shared.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Organetto.Core.Boards.Cards.Data.Attachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CardId")
                        .HasColumnType("bigint")
                        .HasColumnName("card_id");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("file_url");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("filename");

                    b.Property<DateTime>("UploadedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("uploaded_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("UploaderId")
                        .HasColumnType("bigint")
                        .HasColumnName("uploader_id");

                    b.HasKey("Id")
                        .HasName("pk_attachment");

                    b.HasIndex("CardId")
                        .HasDatabaseName("ix_attachment_card_id");

                    b.HasIndex("UploaderId")
                        .HasDatabaseName("ix_attachment_uploader_id");

                    b.ToTable("attachment", (string)null);
                });

            modelBuilder.Entity("Organetto.Core.Boards.Cards.Data.Card", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BoardListId")
                        .HasColumnType("bigint")
                        .HasColumnName("board_list_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_card");

                    b.HasIndex("BoardListId", "Position")
                        .IsUnique()
                        .HasDatabaseName("ix_card_board_list_id_position");

                    b.ToTable("card", (string)null);
                });

            modelBuilder.Entity("Organetto.Core.Boards.Cards.Data.Comment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint")
                        .HasColumnName("author_id");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<long>("CardId")
                        .HasColumnType("bigint")
                        .HasColumnName("card_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_comment");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_comment_author_id");

                    b.HasIndex("CardId")
                        .HasDatabaseName("ix_comment_card_id");

                    b.ToTable("comment", (string)null);
                });

            modelBuilder.Entity("Organetto.Core.Boards.Cards.Data.DueDate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CardId")
                        .HasColumnType("bigint")
                        .HasColumnName("card_id");

                    b.Property<DateTime>("DueAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("due_at");

                    b.Property<bool>("IsComplete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_complete");

                    b.HasKey("Id")
                        .HasName("pk_due_date");

                    b.HasIndex("CardId")
                        .HasDatabaseName("ix_due_date_card_id");

                    b.ToTable("due_date", (string)null);
                });

            modelBuilder.Entity("Organetto.Core.Boards.Data.Board", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsArchived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_archived");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("pk_board");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_board_owner_id");

                    b.ToTable("board", (string)null);
                });

            modelBuilder.Entity("Organetto.Core.Boards.Data.BoardList", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BoardId")
                        .HasColumnType("bigint")
                        .HasColumnName("board_id");

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_board_list");

                    b.HasIndex("BoardId", "Position")
                        .IsUnique()
                        .HasDatabaseName("ix_board_list_board_id_position");

                    b.ToTable("board_list", (string)null);
                });

            modelBuilder.Entity("Organetto.Core.Boards.Data.BoardMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BoardId")
                        .HasColumnType("bigint")
                        .HasColumnName("board_id");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("role");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_board_member");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_board_member_user_id");

                    b.HasIndex("BoardId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_board_member_board_id_user_id");

                    b.ToTable("board_member", (string)null);
                });

            modelBuilder.Entity("Organetto.Core.Users.Data.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_read");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<DateTime>("SentAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_notification");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_notification_user_id");

                    b.ToTable("notification", (string)null);
                });

            modelBuilder.Entity("Organetto.Core.Users.Data.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<string>("FirebaseUid")
                        .IsRequired()
                        .HasColumnType("char(36)")
                        .HasColumnName("firebase_uid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("FirebaseUid")
                        .IsUnique()
                        .HasDatabaseName("ix_user_firebase_uid");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Organetto.Core.Boards.Cards.Data.Attachment", b =>
                {
                    b.HasOne("Organetto.Core.Boards.Cards.Data.Card", "Card")
                        .WithMany("Attachments")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_attachment_card_card_id");

                    b.HasOne("Organetto.Core.Users.Data.User", "Uploader")
                        .WithMany("Attachments")
                        .HasForeignKey("UploaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_attachment_user_uploader_id");

                    b.Navigation("Card");

                    b.Navigation("Uploader");
                });

            modelBuilder.Entity("Organetto.Core.Boards.Cards.Data.Card", b =>
                {
                    b.HasOne("Organetto.Core.Boards.Data.BoardList", "BoardList")
                        .WithMany("Cards")
                        .HasForeignKey("BoardListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_card_board_list_board_list_id");

                    b.Navigation("BoardList");
                });

            modelBuilder.Entity("Organetto.Core.Boards.Cards.Data.Comment", b =>
                {
                    b.HasOne("Organetto.Core.Users.Data.User", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_comment_user_author_id");

                    b.HasOne("Organetto.Core.Boards.Cards.Data.Card", "Card")
                        .WithMany("Comments")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comment_card_card_id");

                    b.Navigation("Author");

                    b.Navigation("Card");
                });

            modelBuilder.Entity("Organetto.Core.Boards.Cards.Data.DueDate", b =>
                {
                    b.HasOne("Organetto.Core.Boards.Cards.Data.Card", "Card")
                        .WithMany("DueDates")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_due_date_card_card_id");

                    b.Navigation("Card");
                });

            modelBuilder.Entity("Organetto.Core.Boards.Data.Board", b =>
                {
                    b.HasOne("Organetto.Core.Users.Data.User", "Owner")
                        .WithMany("OwnedBoards")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_board_user_owner_id");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Organetto.Core.Boards.Data.BoardList", b =>
                {
                    b.HasOne("Organetto.Core.Boards.Data.Board", "Board")
                        .WithMany("Lists")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_board_list_board_board_id");

                    b.Navigation("Board");
                });

            modelBuilder.Entity("Organetto.Core.Boards.Data.BoardMember", b =>
                {
                    b.HasOne("Organetto.Core.Boards.Data.Board", "Board")
                        .WithMany("Members")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_board_member_board_board_id");

                    b.HasOne("Organetto.Core.Users.Data.User", "User")
                        .WithMany("BoardMemberships")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_board_member_user_user_id");

                    b.Navigation("Board");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Organetto.Core.Users.Data.Notification", b =>
                {
                    b.HasOne("Organetto.Core.Users.Data.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notification_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Organetto.Core.Boards.Cards.Data.Card", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Comments");

                    b.Navigation("DueDates");
                });

            modelBuilder.Entity("Organetto.Core.Boards.Data.Board", b =>
                {
                    b.Navigation("Lists");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("Organetto.Core.Boards.Data.BoardList", b =>
                {
                    b.Navigation("Cards");
                });

            modelBuilder.Entity("Organetto.Core.Users.Data.User", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("BoardMemberships");

                    b.Navigation("Comments");

                    b.Navigation("Notifications");

                    b.Navigation("OwnedBoards");
                });
#pragma warning restore 612, 618
        }
    }
}
